# from bot.bot import dp
# from random import randint
# from aiogram.types import Message
# from base.config import SessionLocal, Client
# from keyboards.reply_key.user.sign_user import start_keyboard
#
#
#
# @dp.message_handler(text="–î–∞")
# async def yes_user_otvet(message: Message):
#     await message.answer(
#             text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚úÖ"
#                  "\nC–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ü§≥",
#             reply_markup=start_keyboard
#         )
#
#     contract_number = "516"
#         for _ in range(7):
#             with SessionLocal() as session:
#                 exists = session.query(Client).filter(Client.contract == contract_number).first()
#                 if not exists:
#                     contract_number += str(randint(0, 9))
#
#         new_client = Client(contract=contract_number, phone=data['phone'],
#                             address=data['address'], service=data['service'])
#
#         with SessionLocal() as session:
#             session.add(new_client)
#             session.commit()
#
#
#
# @dp.message_handler(text="–ù–µ—Ç")
# async def yes_user_otvet(message: Message):
#     await message.answer(
#             text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
#             reply_markup=start_keyboard
#         )