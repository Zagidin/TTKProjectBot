import os
import pymorphy2
from bot.bot import dp
from random import randint
from pydub import AudioSegment
import speech_recognition as sr
from aiogram.dispatcher import FSMContext
from base.config import SessionLocal, Client
from status_machine.user import UserRegistration
from keyboards.reply_key.user.sign_user import start_keyboard
from aiogram.types import Message, ReplyKeyboardRemove, ContentType


#     # contract_number = "516"
#     # for _ in range(7):
#     #     with SessionLocal() as session:
#     #         exists = session.query(Client).filter(Client.contract == contract_number).first()
#     #         if not exists:
#     #             contract_number += str(randint(0, 9))
#     #
#     # new_client = Client(contract=contract_number, phone=data['phone'],
#     #                     address=data['address'], service=data['service'])
#     #
#     # with SessionLocal() as session:
#     #     session.add(new_client)
#     #     session.commit()
#     #
#     # await message.answer(
#     #     text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚úÖ"
#     #          "\nC–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã ü§≥",
#     #     reply_markup=start_keyboard
#     # )

my_list_str = {
    "—Ç–∞—Ä–∏—Ñ": ["–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞", "–ø–æ–º–µ–Ω—è—Ç—å —Ç–∞—Ä–∏—Ñ", "—Å–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "–∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", "—Å–º–µ–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞"],
    "—É—Å–ª—É–≥–∞": ["–ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å–ª—É–≥—É", "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ª—É–≥–∏", "–¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏", "—É—Å–ª—É–≥–∞"],
    "–¥–æ–≥–æ–≤–æ—Ä": ["–∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "–æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "–¥–æ–≥–æ–≤–æ—Ä", "—Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä"]
}

morph = pymorphy2.MorphAnalyzer()


@dp.message_handler(text="–ó–∞–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä")
async def registration_user(message: Message):
    await message.answer(
        text="–£–∫–∞–∂–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òé",
        reply_markup=ReplyKeyboardRemove()
    )
    await UserRegistration.phone.set()


@dp.message_handler(state=UserRegistration.phone)
async def user_phone(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text

    await message.reply(
        text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –í–∞—à –∞–¥—Ä–µ—Å, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ ‚ú®",
        reply_markup=ReplyKeyboardRemove()
    )
    await UserRegistration.next()


@dp.message_handler(state=UserRegistration.address)
async def user_address(message: Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text

    await message.answer(
        text="<b>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –Ω–∞–º–∏ —Ç–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª—É–≥–∏:\n</b>"
             "\n<b>–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤:\n</b>"
             "\t–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π - 1000 –ì–±–∏—Ç 800—Ä –≤ –º–µ—Å—è—Ü\n"
             "\t–ú–æ—â–Ω—ã–π - 100 –ú–±–∏—Ç 400—Ä –≤ –º–µ—Å—è—Ü\n"
             "\t–ß–µ—Å—Ç–Ω—ã–π - 10 –ú–±–∏—Ç 100—Ä –≤ –º–µ—Å—è—Ü\n"
             "\n\n<b>–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:</b>\n"
             "\t–ê–Ω—Ç–∏–í–∏—Ä—É—Å –ö–∞—Å–ø–µ—Ä—Å–∫–∏–π - 100—Ä –≤ –º–µ—Å—è—Ü\n"
             "\t–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π IP - 100—Ä –≤ –º–µ—Å—è—Ü\n"
             "\t–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - 100—Ä –≤ –º–µ—Å—è—Ü\n"
             "\t–§–∏—Ä–º–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä - 100—Ä –≤ –º–µ—Å—è—Ü\n",
        parse_mode="HTML"
    )

    await message.answer(
        text="–í—ã–±—Ä–∞–≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –æ–ø—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
             "\n–°–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º —Å –ø–æ–º–æ—â—å—é —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è..."
    )

    await UserRegistration.next()


@dp.message_handler(content_types=ContentType.VOICE, state=UserRegistration.service)
async def user_provider_service(message: Message, state: FSMContext):
    file_id = message.voice.file_id
    file_info = await dp.bot.get_file(file_id)
    downloaded_file = await dp.bot.download_file(file_info.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    with open("gs_user/user_gs_start.ogg", "wb") as new_file:
        new_file.write(downloaded_file.getvalue())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ffmpeg
    if not os.system("ffmpeg -version >nul 2>nul"):
        recognizer = sr.Recognizer()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
        audio = AudioSegment.from_ogg("gs_user/user_gs_start.ogg")
        audio.export("gs_user/user_gs_finish.wav", format="wav")

        with sr.AudioFile("gs_user/user_gs_finish.wav") as source:
            audio_data = recognizer.record(source)
            try:
                text = recognizer.recognize_google(audio_data, language="ru-RU")
                print(type(text))

                # –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
                lemmatized_text = ' '.join([morph.parse(word)[0].normal_form for word in text.split()])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                found_keys = []
                for key, phrases in my_list_str.items():
                    if any(phrase in lemmatized_text for phrase in phrases):
                        found_keys.append(key)

                if found_keys:
                    await message.answer(
                        f"–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(found_keys)}\n\n–¢–µ–∫—Å—Ç: {lemmatized_text}")
                else:
                    await message.answer(f"–ù–∏ –æ–¥–Ω–æ –∏–∑ —Å–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ({my_list_str})\n\n–¢–µ–∫—Å—Ç: {lemmatized_text}")
            except sr.UnknownValueError:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            except sr.RequestError as e:
                await message.answer(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
    else:
        await message.answer("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg.")

    await state.finish()